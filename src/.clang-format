# -*- mode: yaml; -*-

# Goals
# - have automated formatting to avoid wasted time
# - minimize diff-sensitivity to things like changing function names (e.g., don’t want whitespace
#   diffs on all the parameter lines)

# NB: If clang-format can’t parse this file (or doesn’t understand any of the values, it will format
#     with the default settings. If this happens it’s important to _revert_ the formatting, not just
#     reformat after fixing it. This is because some formatting changes aren’t reversible, so you
#     may introduce formatting regressions if you simply reformat.

# TODO: clang-format 17 adds the ability to include a trailing comment on formatting delimiters, so
#       once we’re using that version
#
#     // NB: why we’re disabling
#     // clang-format off
#
#       can become
#
#     // clang-format off: why we’re disabling

AccessModifierOffset: -4
AlignAfterOpenBracket: AlwaysBreak
AlignEscapedNewlines: Left
AlignTrailingComments: true
AllowAllArgumentsOnNextLine: false
AllowAllConstructorInitializersOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: false
AllowShortBlocksOnASingleLine: Empty
AllowShortCaseLabelsOnASingleLine: true
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: true # I’d prefer false
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: false
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: true
BinPackArguments: false
BinPackParameters: false
BreakBeforeBinaryOperators: None # I’d prefer NonAssignment
BreakBeforeBraces: Linux
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: AfterColon # I’d prefer BeforeColon
ColumnLimit: 100 # match rustfmt, if we don’t define this, then we don’t get Wadler
CommentPragmas: '^ IWYU pragma:'
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DerivePointerAlignment: false
DisableFormat: false
IncludeBlocks: Preserve # I’d prefer Regroup
IncludeCategories:
    - Regex:           '<[^/.]+>'
      Priority:        3
    - Regex:           '<.*>'
      Priority:        2
    - Regex:           '.*'
      Priority:        1
IndentCaseLabels: true
IndentFunctionDeclarationAfterType: false
IndentWidth: 4
InsertBraces: false # I’d prefer true
KeepEmptyLinesAtTheStartOfBlocks: false
Language: Cpp
MaxEmptyLinesToKeep: 2
NamespaceIndentation: None
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: false
PackConstructorInitializers: NextLine
# PenaltyBreakAssignment: 0
# PenaltyBreakBeforeFirstCallParameter: 1
# PenaltyBreakComment: 300
# PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 1
# PenaltyBreakString: 1000
# PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 0
PointerAlignment: Left
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: false # Daira would prefer true
SpaceBeforeCtorInitializerColon: true
SpaceBeforeParens: ControlStatements
SpaceInEmptyParentheses: false
SpaceAfterTemplateKeyword: false
SpacesBeforeTrailingComments: 1
SpacesInAngles: false
SpacesInContainerLiterals: false
SpacesInCStyleCastParentheses: false
SpacesInParentheses: false
Standard: c++17
TabWidth: 8
UseTab: Never
# This is a bit of a hack to get clang-format to let us do what we want with examine, even though
# it’s not a macro.
WhitespaceSensitiveMacros: ['examine']
