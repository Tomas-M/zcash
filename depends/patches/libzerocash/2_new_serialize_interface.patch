commit 54fbf543caa834eaad9abdb48fc86b1d004c1d34
Author: Taylor Hornby <havoc@defuse.ca>
Date:   Mon Sep 21 14:14:58 2015 -0600

    Changes to stuff in libzerocash/ towards a working build. #239

diff --git a/libzerocash/Address.h b/libzerocash/Address.h
index 4fb906d..deb41fe 100644
--- a/libzerocash/Address.h
+++ b/libzerocash/Address.h
@@ -34,11 +34,13 @@ public:
 	bool operator==(const PublicAddress& rhs) const;
 	bool operator!=(const PublicAddress& rhs) const;
 
-	IMPLEMENT_SERIALIZE
-	(
+	ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 	    READWRITE(a_pk);
 	    READWRITE(pk_enc);
-	)
+    }
 
 private:
 	std::vector<unsigned char> a_pk;
@@ -65,12 +67,14 @@ public:
 	bool operator==(const Address& rhs) const;
 	bool operator!=(const Address& rhs) const;
 
-	IMPLEMENT_SERIALIZE
-	(
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 	    READWRITE(addr_pk);
 	    READWRITE(a_sk);
         READWRITE(sk_enc);
-	)
+    }
 
 private:
 	PublicAddress addr_pk;
diff --git a/libzerocash/Coin.h b/libzerocash/Coin.h
index da26280..48cc7d8 100644
--- a/libzerocash/Coin.h
+++ b/libzerocash/Coin.h
@@ -48,15 +48,17 @@ public:
 	bool operator==(const Coin& rhs) const;
 	bool operator!=(const Coin& rhs) const;
 
-	IMPLEMENT_SERIALIZE
-	(
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 	    READWRITE(addr_pk);
 	    READWRITE(cm);
         READWRITE(rho);
         READWRITE(r);
 		READWRITE(k);
 		READWRITE(coinValue);
-	)
+	}
 
 private:
 	PublicAddress addr_pk;
diff --git a/libzerocash/CoinCommitment.h b/libzerocash/CoinCommitment.h
index e603d22..47d89a6 100644
--- a/libzerocash/CoinCommitment.h
+++ b/libzerocash/CoinCommitment.h
@@ -38,10 +38,12 @@ public:
 	bool operator==(const CoinCommitment& rhs) const;
 	bool operator!=(const CoinCommitment& rhs) const;
 
-	IMPLEMENT_SERIALIZE
-	(
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
         READWRITE(commitmentValue);
-	)
+    }
 
 private:
     std::vector<unsigned char> commitmentValue;
diff --git a/libzerocash/IncrementalMerkleTree.h b/libzerocash/IncrementalMerkleTree.h
index 2bf1f78..56864b9 100644
--- a/libzerocash/IncrementalMerkleTree.h
+++ b/libzerocash/IncrementalMerkleTree.h
@@ -40,12 +40,14 @@ public:
     void		clear() { hashVec.clear(); hashList.clear(); hashListBytes.clear(); treeHeight = 0; }
     uint32_t	getHeight() { return this->treeHeight; }
 
-    IMPLEMENT_SERIALIZE
-	(
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 	 READWRITE(treeHeight);
      READWRITE(hashVec);
      READWRITE(hashListBytes);
-    )
+    }
 };
 
 /********************* Incremental Merkle tree node **************************/
diff --git a/libzerocash/MintTransaction.h b/libzerocash/MintTransaction.h
index c628878..76fecc4 100644
--- a/libzerocash/MintTransaction.h
+++ b/libzerocash/MintTransaction.h
@@ -56,12 +56,14 @@ public:
      */
     uint64_t getMonetaryValue() const;
 
-    IMPLEMENT_SERIALIZE
-    (
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 		READWRITE(externalCommitment);
         READWRITE(coinValue);
 		READWRITE(internalCommitment);
-    )
+    }
 
 private:
 	std::vector<unsigned char>	coinValue;			// coin value
diff --git a/libzerocash/PourTransaction.h b/libzerocash/PourTransaction.h
index 25f6d1e..97df1c2 100644
--- a/libzerocash/PourTransaction.h
+++ b/libzerocash/PourTransaction.h
@@ -101,8 +101,10 @@ public:
 	 */
 	uint64_t getMonetaryValueOut() const;
 
-    IMPLEMENT_SERIALIZE
-    (
+    ADD_SERIALIZE_METHODS;
+
+    template <typename Stream, typename Operation>
+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {
 		READWRITE(version);
         READWRITE(publicValue);
         READWRITE(serialNumber_1);
@@ -114,7 +116,7 @@ public:
         READWRITE(ciphertext_1);
         READWRITE(ciphertext_2);
 		READWRITE(zkSNARK);
-    )
+    }
 
 
 private:
